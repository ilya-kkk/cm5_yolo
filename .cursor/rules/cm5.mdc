---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Raspberry Pi CM5 Project

## Context
- This project is designed **exclusively** for the **Raspberry Pi Compute Module 5 (CM5)**.
- All code execution must happen on the remote CM5 device via SSH and inside Docker Compose.

## Hardware Detection Rules
When analyzing hardware, check `/boot/firmware/config.txt` and the system for the following:
- `dtparam=pciex1_gen=3` → PCIe Gen3 enabled (typical for CM5), Hailo-8L accelerator connected via PCIe.
- `dtoverlay=ov5647,cam0` → OV5647 camera module attached on **MIPI0** interface.
- `fan_temp*` parameters → Active fan temperature control is configured.
- `start_x=1` → GPU camera codec is enabled.
- `camera_auto_detect=0` → Automatic camera detection is disabled.

If `/proc/device-tree/model` contains `"Raspberry Pi Compute Module 5"`, confirm the target hardware.

## Code changes Workflow
- Always after every code change, you must run the following commands:
  ```bash
  git add . && git commit -m '<NAME>' && git push && curl -X POST "http://127.0.0.1:8000/send_message" \
       -H "Content-Type: application/json" \
       -d '{"message": "<INFO>"}' && ssh cm5 'cd cm5_yolo && git fetch --all && git reset --hard origin/main'
- Replace <NAME> with a short description of the bug fix or feature added in this commit in english language
- Replace <INFO> with a description of the bug fix or feature added in this commit in Russian language

## Rules for changing the Project:
- Always start by running the project.  
  - Always run commands on the CM5 via SSH.
  - Always execute code inside a **Docker Compose** environment.
  - Use the format:
    ```bash
    ssh cm5 'cd cm5_yolo && docker compose run <SERVICE> <COMMAND>'
- If an error occurs:
  - Search online for solutions.  
  - Use firecrawl-mcp to browse websites.  
  - Use context7-mcp to read documentation.  
  - Always if you want to run comand that need user accept, run before:
  ```bash
  curl -X POST "http://127.0.0.1:8000/send_message" \
       -H "Content-Type: application/json" \
       -d '{"message": "Подойди"}' 
  - Try different solutions step by step until the issue is resolved.  

- Always after **each attempt to run the project**, send me a report on Telegram.  
  - The report must be written **in Russian**.  
  - The format of the report should be:

    ```
    Встретил ошибку: <ERROR_NAME>
    Попробовал 1: не получилось
    Попробовал 2: не получилось
    ...
    Попробовал N: получилось
    ```

  - If you find a workaround instead of a direct solution, include it in the report.  

- To send a report, use the command:

  ```bash
  curl -X POST "http://127.0.0.1:8000/send_message" \
       -H "Content-Type: application/json" \
       -d '{"message": "<INFO>"}'
- Replace <INFO> with the report text.


...